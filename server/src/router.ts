import dotenv from "dotenv";
dotenv.config({});
import express, { response } from "express";
import dummyFacts from "./data/dummyFacts";
import createPresentation from "./functions/createPresentation";
import getTopics from "./functions/getTopics";
import authorize from "./hooks/authorize";
import iParameters from "./models/parameters";
import { Configuration, OpenAIApi } from "openai";
import iSlideInfo from "./models/slideInfo";
import getDetails from "./functions/getDetails";
import errorChecks from "./hooks/errorChecks";
import getCategory from "./hooks/category";
import dummyTitles from "./data/dummyTitles";
import axios from "axios";
import iVerifyCodeParams from "./models/verifyCodeParams";
import iTokenPayload from "./models/tokenPayload";
import iTokenResponse from "./models/tokenResponse";
import fetchOAuthTokens from "./functions/fetchOAuthTokens";
import iUserJWT from "./models/userJWT";
import jwtDecode from "jwt-decode";
import mongoose, { Schema } from "mongoose";
import iUserAccount from "./models/userAccount";
import userSchema from "./schemas/user";
import userDB from "./schemas/user";
import { OAuth2Client } from "google-auth-library";
import client from "./client";
// import UserAccount from "./modules/user";

const configuration = new Configuration({
  apiKey: process.env.OPENAI_API_KEY,
});
const openai = new OpenAIApi(configuration);

const router = express.Router();

//Google Authorization Workflow API

/*

Your authorization code endpoint must handle GET requests with these URL query string parameters:

Name	Value
authuser	Request for user sign-in authentication
code	An OAuth2 authorization code generated by Google
hd	The hosted domain of the user account
prompt	User consent dialog
scope	Space separated list of one or more OAuth2 scopes to be authorized
state	CRSF state variable

*/

router.get("/verifyCode", async (req, res) => {
  console.log("Verifying Code");
  // console.log(req.headers);
  try {
    //Google guidelines suggest we check and verify the header name and value
    if (req.headers["x-requested-with"] !== "XmlHttpRequest") {
      return res.status(400).send("Invalid Headers");
    }
    //We retrieve the authorization code from the request
    const code = req.query.code as string;
    //We use the built in Node JS OAuth2Client to get id and access token data
    const tokensResponse = await (await client.getToken(code)).tokens;
    const { access_token, id_token } = tokensResponse;
    const userResponse: iUserJWT = jwtDecode(id_token);
    //We confirm that the user is veriifed by Google
    if (!userResponse.email_verified) {
      return res.status(403).send("Google account is not verified");
    }
    //We sent the ID token in a secure httpOnly cookie to the frontend
    res.cookie("id_token", id_token, { httpOnly: true, secure: true });
    //We then either update the user in the MongoDB database with updated credentials or add the user if it doesn't exist
    const id = userResponse.sub;
    const foundUser = await userDB.findOneAndUpdate(
      { email: userResponse.email },
      {
        _id: id,
        firstName: userResponse.given_name,
        lastName: userResponse.family_name,
        email: userResponse.email,
        googleOAuthCredentials: tokensResponse,
      },
      { upsert: true, new: true }
    );
    console.log("Stored user with id: " + id);
    console.log(foundUser);
    const response = {
      idToken: id_token,
      accessToken: access_token,
    };
    return res.status(200).send(response);
  } catch (err) {
    console.error(err);
    return res.status(400).send("Error");
  }
});

router.post("/validateParameters", (req, res) => {
  const { topic, category, slideCount } = req.body;
  errorChecks(topic, slideCount, category, res);
  return res.status(200).send("OK");
});

router.post("/category", async (req, res) => {
  const { topic, auto, category } = req.body;
  if (auto) {
    const response = await getCategory(openai, topic);
    console.log("Category:", response);
    return res.status(200).send(response);
  }
  console.log("Category:", category);
  return res.status(200).send(category);
});

router.post("/slideTitles", async (req, res) => {
  const { topic, category, slideCount, model } = req.body;
  console.log(`Fetching info about ${topic}...`);
  const titles = await getTopics(openai, category, topic, slideCount, model);
  console.log("Titles", titles);
  return res.status(200).json(titles);
  // console.log("Titles", dummyTitles);
  // return res.status(200).json(dummyTitles);
});

router.post("/slideDetails", async (req, res) => {
  const {
    topic,
    category,
    // title,
    titles,
  } = req.body;
  const slidesInfo: iSlideInfo[] = [];
  for (let i = 0; i < titles.length; i++) {
    const facts = await getDetails(openai, category, titles[i], 5, topic);
    slidesInfo.push({ title: titles[i], facts });
  }
  console.log("Gathered Data For Slides: \n");
  console.log(slidesInfo);
  return res.status(200).json(slidesInfo);
  // console.log(dummyFacts);
  // return res.status(200).json(dummyFacts);
});

router.post("/createPresentation", async (req, res) => {
  console.log("req.body", JSON.stringify(req.body, null, 2));
  const parameters = req.body;
  parameters.images = false; //For early version
  parameters.sources = false; //For early version
  const accessToken = parameters.accessToken;
  try {
    console.log("Authorizing...");
    // const client = await authorize();
    client.setCredentials({
      access_token: accessToken,
    });
    console.log("Creating presentation...");
    const presentation = await createPresentation(
      parameters,
      client,
      parameters.slidesInfo,
      // dummyFacts,
      process.env.GOOGLE_SEARCH_KEY,
      process.env.CX
    );
    return res.status(200).send(presentation);
  } catch (err) {
    console.error(err);
    // res.status(400).write("FAIL");
    // return res.end();
    return res.status(400).send("FAIL");
  }
});

export default router;
